name: publish

on:
  push:
    tags:
      - "*"

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt
          override: true

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libwebkit2gtk-4.0-dev libgtksourceview-4-dev libsoup2.4-dev libssl-dev libsqlite3-dev -y

      - name: Install Diesel CLI
        run: cargo install diesel_cli --no-default-features --features sqlite

      - name: Install npm dependencies
        run: npm install

      - name: Startup a Fresh DB
        run: npm run db

      - name: Build Tauri App
        run: npm run app:build

      - name: Upload Linux Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: ./target/release/bundle

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Setup MSVC tools
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install sqlite
        shell: cmd
        run: |
          choco install sqlite
          cd /D C:\ProgramData\chocolatey\lib\SQLite\tools
          lib /machine:x64 /def:sqlite3.def /out:sqlite3.lib

      - name: Set variables for sqlite
        shell: bash
        run: |
          echo "C:\ProgramData\chocolatey\lib\SQLite\tools" >> $GITHUB_PATH
          echo "SQLITE3_LIB_DIR=C:\ProgramData\chocolatey\lib\SQLite\tools" >> $GITHUB_ENV

      - name: Install Diesel CLI
        run: cargo install diesel_cli --no-default-features --features sqlite

      - name: Install npm dependencies
        run: npm install

      - name: Startup a Fresh DB
        run: npm run db

      - name: Build Tauri App
        run: npm run app:build

      - name: Zip standalone exe
        shell: pwsh
        run: |
          # Get the first .exe file in the directory
          $exeFile = Get-ChildItem -Path "./target/release/" -Filter "*.exe" | Select-Object -First 1

          # Define the output zip file name based on the .exe file name
          $zipFileName = [System.IO.Path]::ChangeExtension($exeFile.Name, ".zip")
          
          # Create the zip file
          Compress-Archive -Path @($exeFile.FullName, "./target/release/app.db") -DestinationPath ./target/release/bundle/$zipFileName -CompressionLevel Fastest
          
          Write-Host "Zipped files into $zipFileName"

      - name: Upload Windows Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: ./target/release/bundle

  release:
    runs-on: ubuntu-latest
    needs: [build-windows, build-linux]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: artifacts
          path: .

      - name: Create GitHub release
        run: |
          REPO="ayeniswe/TraderCompanion"
          TAG=v$(jq -r '.version' package.json)
          APP=$(jq -r '.name' package.json)
          GITHUB_TOKEN="${{ secrets.TRADERCOMPANION }}"

          # Create a release
          response=$(curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -d "{\"tag_name\": \"$TAG\", \"name\": \"$APP $TAG\", \"body\": \"\"}" \
            "https://api.github.com/repos/$REPO/releases")

          # Extract the release ID from the response
          RELEASE_ID=$(echo "$response" | jq -r '.id')

          echo ls -la

          # Define an array of artifacts
          file_patterns=(
            "./deb/*.deb"
            "./rpm/*.rpm"
            "./appimage/*.AppImage",
            "./*.zip",
            "./nsis/*.exe"
          )

          # Loop through each pattern in the array
          for pattern in "${file_patterns[@]}"; do
            # Expand the pattern to find matching files
            for file_path in $pattern; do
              if [ -f "$file_path" ] && [ -s "$file_path" ]; then
                response=$(curl -L \
                  -X POST \
                  -H "Accept: application/vnd.github+json" \
                  -H "Authorization: Bearer $GITHUB_TOKEN" \
                  -H "X-GitHub-Api-Version: 2022-11-28" \
                  -H "Content-Type: application/octet-stream" \
                  "https://uploads.github.com/repos/$REPO/releases/$RELEASE_ID/assets?name=$(basename "$file_path")" \
                  --data-binary "@$file_path")
                echo "Uploaded $file_path: $response"
              else
                echo "Skipping empty or non-existent file: $file_path"
              fi
            done
          done
